generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int               @id @default(autoincrement())
  username           String            @unique @db.VarChar(50)
  email              String            @unique @db.VarChar(100)
  password_hash      String            @db.VarChar(255)
  role               String            @db.VarChar(10)
  created_at         DateTime          @default(now()) @db.Timestamp(6)
  createdClasses     Class[]           @relation("CreatedClasses")
  classes            ClassMembership[]
  leaderboard        Leaderboard[]
  graded_submissions Submission[]      @relation("Submission_graded_byToUser")
  submissions        Submission[]
}

model Class {
  class_id    Int               @id @default(autoincrement())
  class_name  String            @db.VarChar(100)
  class_code  String            @unique @db.VarChar(10)
  section     String?           @db.VarChar(50)
  subject     String?           @db.VarChar(100)
  room        String?           @db.VarChar(50)
  created_by  Int
  created_at  DateTime          @default(now()) @db.Timestamp(6)
  createdBy   User              @relation("CreatedClasses", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  members     ClassMembership[]
  leaderboard Leaderboard[]
  tasks       Task[]
}

model ClassMembership {
  class_id Int
  user_id  Int
  role     String @db.VarChar(10)
  class    Class  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction)
  user     User   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([class_id, user_id])
}

model Task {
  task_id          Int          @id @default(autoincrement())
  class_id         Int
  task_title       String       @db.VarChar(255)
  task_description String?
  start_date       DateTime     @db.Timestamp(6)
  deadline         DateTime     @db.Timestamp(6)
  total_points     Int
  max_attempts     Int          @default(1)
  status           String       @default("draft") @db.VarChar(10)
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  questions        Question[]
  submissions      Submission[]
  class            Class        @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction)
}

model Question {
  question_id    Int            @id @default(autoincrement())
  task_id        Int
  question_type  String         @db.VarChar(10)
  question_text  String         @db.VarChar(500)
  points         Int
  essay_question EssayQuestion?
  mcq_question   MCQQuestion?
  task           Task           @relation(fields: [task_id], references: [task_id], onDelete: Cascade, onUpdate: NoAction)
}

model MCQQuestion {
  question_id    Int      @id
  choices        Json
  correct_answer String   @db.VarChar(255)
  question       Question @relation(fields: [question_id], references: [question_id], onDelete: Cascade, onUpdate: NoAction)
}

model EssayQuestion {
  question_id Int      @id
  guidelines  String?
  question    Question @relation(fields: [question_id], references: [question_id], onDelete: Cascade, onUpdate: NoAction)
}

model Submission {
  submission_id                   Int      @id @default(autoincrement())
  task_id                         Int
  user_id                         Int
  attempt_number                  Int
  submission_data                 Json
  submission_time                 DateTime @default(now()) @db.Timestamp(6)
  points_earned                   Int?
  is_graded                       Boolean? @default(false)
  graded_by                       Int?
  User_Submission_graded_byToUser User?    @relation("Submission_graded_byToUser", fields: [graded_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  task                            Task     @relation(fields: [task_id], references: [task_id], onDelete: NoAction, onUpdate: NoAction)
  user                            User     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([task_id, user_id])
}

model Leaderboard {
  class_id     Int
  user_id      Int
  total_points Int      @default(0)
  last_updated DateTime @default(now()) @db.Timestamp(6)
  class        Class    @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction)
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([class_id, user_id])
}
